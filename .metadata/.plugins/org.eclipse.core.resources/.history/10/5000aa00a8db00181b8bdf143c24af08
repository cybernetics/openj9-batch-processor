package com.ibm.developer.batchprocessor;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.mapping.FieldSetMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.batch.item.file.transform.FieldSet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.validation.BindException;

@Configuration
@EnableBatchProcessing
public class BatchConfiguration {

	@Autowired
	private JobBuilderFactory jobBuilderFactory;

	@Autowired
	private StepBuilderFactory stepBuilderFactory;

	@Bean
	FlatFileItemReader<FootballPlay> reader() {
		FlatFileItemReader<FootballPlay> reader = new FlatFileItemReader<FootballPlay>();
		reader.setResource(new ClassPathResource("pbp-2018.csv"));
		reader.setLineMapper(new DefaultLineMapper<FootballPlay>() {
			{
				setFieldSetMapper(new FieldSetMapper<FootballPlay>() {
					
					@Override
					public FootballPlay mapFieldSet(FieldSet fieldSet) throws BindException {
						fieldSet.
						return null;
					}
				});
				setLineTokenizer(new DelimitedLineTokenizer() {
					{
						setNames(new String[] { //
								"GameId", //
								"GameDate", //
								"Quarter", //
								"Minute", //
								"Second", //
								"OffenseTeam", //
								"DefenseTeam", //
								"Down", //
								"ToGo", //
								"YardLine", //
								"SeriesFirstDown", //
								"NextScore", //
								"Description", //
								"TeamWin", //
								"SeasonYear", //
								"Yards", //
								"Formation", //
								"PlayType", //
								"IsRush", //
								"IsPass", //
								"IsIncomplete", //
								"IsTouchdown", //
								"PassType", //
								"IsSack", //
								"IsChallenge", //
								"IsChallengeReversed", //
								"Challenger", //
								"IsMeasurement", //
								"IsInterception", //
								"IsFumble", //
								"IsPenalty", //
								"IsTwoPointConversion", //
								"IsTwoPointConversionSuccessful", //
								"RushDirection", //
								"YardLineFixed", //
								"YardLineDirection", //
								"IsPenaltyAccepted", //
								"PenaltyTeam", //
								"IsNoPlay", //
								"PenaltyType", //
								"PenaltyYards" //
						});
					}
				});
				setFieldSetMapper(new BeanWrapperFieldSetMapper<FootballPlay>() {
					{
						setTargetType(FootballPlay.class);
					}
				});
			}
		});
		return reader;
	}

	@Bean
	ItemProcessor<FootballPlay, FootballPlayRecord> processor() {
		return new FootballPlayProcessor();
	}

	@Bean
	public Job importFootballPlayJob(// JobExecutionListener listener,
			Step step1) {
		return jobBuilderFactory.get("importFootballPlayJob").incrementer(new RunIdIncrementer())
//            .listener(listener)
				.flow(step1).end().build();
	}

	@Bean
	public Step step1() {
		return stepBuilderFactory.get("step1").<FootballPlay, FootballPlayRecord>chunk(10).reader(reader())
				.processor(processor()).build();
	}
}
